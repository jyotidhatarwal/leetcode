class Solution {
    public boolean isBipartite(int[][] graph) {
        // int n = graph.length;
        // int colorArray[] = new int[n];
        // LinkedList<Integer> que = new LinkedList<>();
        // for(int i=0;i<n;i++){
        //     if(colorArray[i] == 0){
        //         que.add(i);
        //         colorArray[i]= 1;
        //         while(que.size() > 0){
        //             int size = que.size();
        //             while(size-- > 0){
        //                 int rem = que.removeFirst();
        //                 for(int nbrs : graph[rem]){
        //                     if(colorArray[nbrs] == colorArray[rem]) return false;
        //                     else if(colorArray[nbrs] == 0){
        //                         que.add(nbrs);
        //                         colorArray[nbrs] = -colorArray[rem]; 
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }
        // return true;
        int n = graph.length;
        LinkedList<Integer> que = new LinkedList<>();
        int[]color = new int[n];
        for(int i=0;i<n;i++){
            if(color[i] == 0){
                // unvisited
                que.add(i);
                color[i] = 1;
                while(que.size() > 0){
                    int rem = que.removeFirst();
                    for(int vertex : graph[rem]){
                        if(color[vertex] == color[rem]){
                            return false;
                        }else if(color[vertex] == 0){
                            color[vertex] = -color[rem];
                            que.add(vertex);
                        }
                    }
                }
            }
        }
        return true;
    }
}
